#### How to create an AWS Lambda that will 

**Step 1: Create a new IAM role**

This role will be used by your Lambda function to access S3 resources. 

1.1. In the AWS Management Console, go to the IAM service.

1.2. In the navigation pane, choose "Roles", and then choose "Create role".

1.3. Choose "Lambda" as the service that will use this role and click "Next: Permissions".

1.4. In the "Attach permissions policies" page, search for "AmazonS3FullAccess" policy and select it. (Note: It is recommended to restrict the policy for production use).

1.5. Click "Next: Tags" -> "Next: Review". 

1.6. In the "Review" page, provide a name for the role, e.g., "lambda_s3_access", and click "Create role".

**Step 2: Create a Lambda Layer with required dependencies**

As mentioned in my previous responses, AWS Lambda doesn't have the `pyheif` and `PIL` libraries pre-installed. We need to create a Lambda Layer that includes these dependencies.

2.1. Create a new directory on your local machine and name it "python".

2.2. Create a `requirements.txt` file in this directory with the following content:

```
pyheif
Pillow
```

2.3. Open a terminal, navigate to the directory containing the `requirements.txt` file and run the following commands:

```bash
pip install -r requirements.txt -t ./python
zip -r my_layer.zip ./python
```

2.4. Now, go back to the AWS Management Console and open the AWS Lambda service.

2.5. In the navigation pane, choose "Layers" and then click "Create layer".

2.6. Give your layer a name, e.g., "heic_to_jpeg_layer", upload the `my_layer.zip` file you created, choose the compatible runtimes (e.g., Python 3.x), and then click "Create".

**Step 3: Create the AWS Lambda function**

3.1. In the AWS Lambda service, click "Create function".

3.2. Choose "Author from scratch", provide a name for your function, e.g., "convert_heic_to_jpeg", select the Python 3.x runtime.

3.3. Under "Permissions", choose "Use an existing role" and select the "lambda_s3_access" role you created.

3.4. Click "Create function".

3.5. On the function configuration page, click on "Layers" and then "Add a layer".

3.6. Select the "heic_to_jpeg_layer" layer you created and click "Add".

3.7. In the "Function code" section, replace the existing code with:

### Start of Python Code ###
import boto3
import os
import uuid
from PIL import Image
import pyheif

s3 = boto3.client('s3')

def convert_heic_to_jpeg(bucket, key):
    download_path = '/tmp/{}{}'.format(uuid.uuid4(), key)
    upload_path = '/tmp/converted-{}'.format(key)
    
    s3.download_file(bucket, key, download_path)
    heif_file = pyheif.read(download_path)
    image = Image.frombytes(
        heif_file.mode, 
        heif_file.size, 
        heif_file.data,
        "raw",
        heif_file.mode,
        heif_file.stride,
    )
    image.save(upload_path, format="JPEG")
    s3.upload_file(upload_path, '{}-jpeg'.format(bucket), '{}.jpeg'.format(key))

def lambda_handler(event, context):
    source_bucket = '<source-bucket-name>'

    response = s3.list_objects_v2(Bucket=source_bucket)

    for object in response['Contents']:
        if object['Key'].endswith('.heic'):
            convert_heic_to_jpeg(source_bucket, object['Key'])

### End of Python Code ###

3.8. Save the changes.

**Step 4: Create the S3 Buckets**

4.1. Go to the S3 service in the AWS Management Console.

4.2. Create two new buckets, one for the source images and one for the destination images. Let's call them `source-bucket` and `destination-bucket`.

4.3. Replace `<source-bucket-name>` in the Lambda function with the name of your actual source bucket. Similarly, replace `<source-bucket-name>-jpeg` with the name of your actual destination bucket.

**Step 5: Test the function**

5.1. Upload a `.heic` image to the source bucket.

5.2. Manually trigger the Lambda function in the AWS Console.

5.3. Check the destination